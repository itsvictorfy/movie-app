pipeline {
    agent {
        kubernetes {
            label 'slave'
            yamlFile 'build-pod.yaml'
            defaultContainer 'ez-docker-helm-build'
        }
    }

    environment {
        DOCKER_IMAGE_NAME = "itsvictorfy/final-proj"
        DOCKER_IMAGE_TAG = "${env.GIT_COMMIT.take(7)}"
        DOCKERHUB_USERNAME = credentials('victor_dockerhub_username')
        DOCKERHUB_PASS = credentials('victor_dockerhub_pass')
        GITHUB_AT = credentials('github_access_token')
        CHART_VERSION = "1.0-${env.BRANCH_NAME}-${DOCKER_IMAGE_TAG}"
        GITHUB_EMAIL = credentials('github_email')
    }

    stages {
        stage('Build Docker Image & push') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                    sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASS}"
                    sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
            }
        }
        stage('Build Helm Chart') {
            steps {
                sh "sed -i 's/tag: .*/tag: ${DOCKER_IMAGE_TAG}/' helm-chart/values.yaml"
                sh "sed -i 's/namespace: .*/namespace: ${BRANCH_NAME}/' helm-chart/values.yaml"
                sh "helm package helm-chart/ -d helm-chart/ --version ${CHART_VERSION}"
            }
        }

        stage(' Helm Login and Push') {
            when {
                expression {
                    return env.BRANCH_NAME == 'main'
                }
            }
            steps {
                script {
                    sh "helm push helm-chart/finalproj-app-${CHART_VERSION}.tgz oci://registry-1.docker.io/itsvictorfy"
                }
            }
        }
        stage('Update Helm Values') {
            steps {
                script {
                    def branchName = env.BRANCH_NAME
                    
                    if (branchName == 'main') {
                        echo "Performing actions for the master branch..."
                        sh "git config --global user.email ${GITHUB_EMAIL}"
                        sh "git config --global user.name ${DOCKERHUB_USERNAME}"
                        sh "git clone https://${DOCKERHUB_USERNAME}:${GITHUB_AT}@github.com/${DOCKERHUB_USERNAME}/finalproj-argo.git"
                        dir('finalproj-argo') {
                            sh "sed -i 's/tag: .*/tag: ${DOCKER_IMAGE_TAG}/' helm-chart/values.yaml"
                            sh "sed -i 's/namespace: .*/namespace: prod/' helm-chart/values.yaml"
                            sh "git add ."
                            sh "git commit -m 'Update Image Tag ${DOCKER_IMAGE_TAG}'"
                            sh "git push"
                        }
                    } else {
                        echo "Performing actions for feature branch..."
                        sh "git config --global user.email ${GITHUB_EMAIL}"
                        sh "git config --global user.name ${DOCKERHUB_USERNAME}"
                        sh "git clone https://${DOCKERHUB_USERNAME}:${GITHUB_AT}@github.com/${DOCKERHUB_USERNAME}/finalproj-argo.git"
                        dir('finalproj-argo') {
                            sh "sed -i 's/tag: .*/tag: ${DOCKER_IMAGE_TAG}/' ${env.BRANCH_NAME}/helm-chart/values.yaml"
                            sh "sed -i 's/namespace: .*/namespace: ${env.BRANCH_NAME}/' ${env.BRANCH_NAME}/helm-chart/values.yaml"
                            sh "git add ."
                            sh "git commit -m 'Update Image Tag ${DOCKER_IMAGE_TAG}'"
                            sh "git push"
                        }
                    } 
                }
            }
        }
    }
    post {
        always {
            script {
                def buildStatus = currentBuild.currentResult
                def buildDisplayName = currentBuild.displayName

                def dockerImageName = env.DOCKER_IMAGE_NAME
                def dockerImageTag = env.DOCKER_IMAGE_TAG
                def chartVersion = env.CHART_VERSION

                emailext (
                    to: 'vfunyoung@gmail.com',  // Replace with the recipient's email address
                    subject: "Jenkins Build Notification - Web App Build: ${buildDisplayName}, Image Tag: ${dockerImageTag}",
                    body: "Build ${buildDisplayName} has completed.\n" +
                        "Status: ${buildStatus}\n" +
                        "Chart Version: ${chartVersion}",
                    mimeType: 'text/plain'
                )
            }
        }
    }
}
